.piece {
	rotate: var(--rotate);
	&[type="O"],
	&[type="G"] {
		scale: 1.2;
	}

	&[type="K"],
	&[type="H"] {
		scale: 1.1;
	}

	&>polygon{
		fill: hsl(32, 60%, 64%);
		stroke-width: 2px;
		stroke: hsl(32, 62%, 59%);
		filter: drop-shadow(1px 1px 2px rgba(125, 80, 52, 0.781));
	}

	.ou &.ou,
	.gyoku &.gyoku {
		cursor: pointer;
	}

	&.checking polygon{
		stroke: hsl(0, 70%, 55%);
		stroke-width: 5px;
	}

	&.immovable {
		pointer-events: none;
		filter: grayscale(0.2);
	}

	& text{
		writing-mode: vertical-rl;
		font-family: LigatureSymbols;
		pointer-events: none;
		text-anchor: middle;
		alignment-baseline: central;
	}

	&.nari text{
		font-family: kouzan;
		font-size: 25pt;
		stroke: red;
		fill: red;
	}

	.nari .selected & {
		pointer-events: all !important;
		cursor: pointer;
		scale: 0.5;
		--translate: 15px;
		
		&:hover {
			scale: 0.65;
			--translate: 12px;
		}
		
		&.left {
			translate: calc(-1 * var(--translate));
		}
	
		&.right {
			translate: var(--translate);
		}
	}

	#board:not(.directing):not(.nari) &.selected{
		:is(&, & *) {
			animation: hover 2s ease-in-out infinite alternate-reverse;
		}
		>polygon{
			stroke: rgb(52, 123, 222);
			stroke-width: 1.4px;
			filter: drop-shadow(1px 1px 2px rgb(52 123 222 / 0.8));
		}
	}

	&.gyoku {
		--rotate-base: 180deg;
		--rotate: var(--rotate-base);
	}

	&.-j {
		transform: scaleX(0.97);
		--rotate: calc(var(--rotate-base, 0deg) + -60deg);
	}
	&.-k {
		transform: scaleX(0.97);
		--rotate: calc(var(--rotate-base, 0deg) + 60deg);
	}
}

@keyframes hover {
	from {
		transform: translate(-1px, -1px) scale(1.04);
	 }
	 to {
		/* returns the sun to its default position */
		transform: translate(0) scale(1.02);
	 }
  
}